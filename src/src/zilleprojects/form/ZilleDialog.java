/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UsuarioesDialog.java
 *
 * Created on 11/12/2013, 08:22:33
 */
package zilleprojects.form;


import DAO.IAbstractDAO;
import Modelo.EntidadAbstracta;
import Modelo.tablemodel.ZilleAbstractTableModel;
import Vista.JDialogCustom;
import Vista.OpcionPanel;
import Vista.PanelEsquinaAzul;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author matuu
 */
public abstract class ZilleDialog extends JDialogCustom {
    
    
    
    /** Creates new form UsuarioesDialog */
    public ZilleDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);  
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wrap = new PanelEsquinaAzul();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        panBotones = new javax.swing.JPanel();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        lblTitulo = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        jPanel3 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnRecargar = new javax.swing.JButton();
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jPanel2 = new javax.swing.JPanel();
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel2 = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        txtBuscarTexto = new javax.swing.JTextField();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(20, 32767));
        jLabel20 = new javax.swing.JLabel();
        lblTotalEntidad = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 32767));
        jLabel17 = new javax.swing.JLabel();
        lblTotalFiltrado = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        panGrid = new javax.swing.JPanel();
        filler14 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        filler15 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 100));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getResourceMap(ZilleDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setName("Form"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        wrap.setName("wrap"); // NOI18N
        wrap.setLayout(new javax.swing.BoxLayout(wrap, javax.swing.BoxLayout.Y_AXIS));

        filler9.setFocusable(false);
        filler9.setName("filler9"); // NOI18N
        wrap.add(filler9);

        panBotones.setMaximumSize(new java.awt.Dimension(32965, 34));
        panBotones.setName("panBotones"); // NOI18N
        panBotones.setOpaque(false);
        panBotones.setLayout(new javax.swing.BoxLayout(panBotones, javax.swing.BoxLayout.LINE_AXIS));

        filler10.setName("filler10"); // NOI18N
        panBotones.add(filler10);

        lblTitulo.setFont(lblTitulo.getFont().deriveFont(lblTitulo.getFont().getStyle() | java.awt.Font.BOLD, lblTitulo.getFont().getSize()+4));
        lblTitulo.setLabelFor(this);
        lblTitulo.setText(resourceMap.getString("lblTitulo.text")); // NOI18N
        lblTitulo.setName("lblTitulo"); // NOI18N
        panBotones.add(lblTitulo);

        filler1.setName("filler1"); // NOI18N
        panBotones.add(filler1);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getActionMap(ZilleDialog.class, this);
        btnNuevo.setAction(actionMap.get("showNuevaEntidad")); // NOI18N
        btnNuevo.setIcon(resourceMap.getIcon("btnNuevo.icon")); // NOI18N
        btnNuevo.setText(resourceMap.getString("btnNuevo.text")); // NOI18N
        btnNuevo.setName("btnNuevo"); // NOI18N
        jPanel3.add(btnNuevo);

        btnEditar.setAction(actionMap.get("showModificarEntidad")); // NOI18N
        btnEditar.setIcon(resourceMap.getIcon("btnEditar.icon")); // NOI18N
        btnEditar.setText(resourceMap.getString("btnEditar.text")); // NOI18N
        btnEditar.setName("btnEditar"); // NOI18N
        jPanel3.add(btnEditar);

        btnEliminar.setAction(actionMap.get("EliminarEntidad")); // NOI18N
        btnEliminar.setIcon(resourceMap.getIcon("btnEliminar.icon")); // NOI18N
        btnEliminar.setText(resourceMap.getString("btnEliminar.text")); // NOI18N
        btnEliminar.setName("btnEliminar"); // NOI18N
        jPanel3.add(btnEliminar);

        btnRecargar.setAction(actionMap.get("cargarEntidades")); // NOI18N
        btnRecargar.setIcon(resourceMap.getIcon("btnRecargar.icon")); // NOI18N
        btnRecargar.setText(resourceMap.getString("btnRecargar.text")); // NOI18N
        btnRecargar.setName("btnRecargar"); // NOI18N
        jPanel3.add(btnRecargar);

        panBotones.add(jPanel3);

        filler11.setName("filler11"); // NOI18N
        panBotones.add(filler11);

        wrap.add(panBotones);

        filler8.setName("filler8"); // NOI18N
        wrap.add(filler8);

        jPanel2.setMaximumSize(new java.awt.Dimension(2147483647, 45));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        filler12.setName("filler12"); // NOI18N
        jPanel2.add(filler12);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setMinimumSize(new java.awt.Dimension(58, 15));
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel2.add(jLabel2);

        filler5.setName("filler5"); // NOI18N
        jPanel2.add(filler5);

        txtBuscarTexto.setText(resourceMap.getString("txtBuscarTexto.text")); // NOI18N
        txtBuscarTexto.setMargin(new java.awt.Insets(10, 10, 10, 10));
        txtBuscarTexto.setName("txtBuscarTexto"); // NOI18N
        txtBuscarTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarTextoKeyReleased(evt);
            }
        });
        jPanel2.add(txtBuscarTexto);

        filler2.setName("filler2"); // NOI18N
        jPanel2.add(filler2);

        jLabel20.setForeground(resourceMap.getColor("jLabel20.foreground")); // NOI18N
        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N
        jPanel2.add(jLabel20);

        lblTotalEntidad.setFont(lblTotalEntidad.getFont().deriveFont(lblTotalEntidad.getFont().getStyle() | java.awt.Font.BOLD, lblTotalEntidad.getFont().getSize()+2));
        lblTotalEntidad.setText(resourceMap.getString("lblTotalEntidad.text")); // NOI18N
        lblTotalEntidad.setName("lblTotalEntidad"); // NOI18N
        jPanel2.add(lblTotalEntidad);

        filler3.setName("filler3"); // NOI18N
        jPanel2.add(filler3);

        jLabel17.setForeground(resourceMap.getColor("jLabel20.foreground")); // NOI18N
        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N
        jPanel2.add(jLabel17);

        lblTotalFiltrado.setFont(lblTotalFiltrado.getFont().deriveFont(lblTotalFiltrado.getFont().getStyle() | java.awt.Font.BOLD, lblTotalFiltrado.getFont().getSize()+2));
        lblTotalFiltrado.setText(resourceMap.getString("lblTotalFiltrado.text")); // NOI18N
        lblTotalFiltrado.setName("lblTotalFiltrado"); // NOI18N
        jPanel2.add(lblTotalFiltrado);

        filler4.setName("filler4"); // NOI18N
        jPanel2.add(filler4);

        filler13.setName("filler13"); // NOI18N
        jPanel2.add(filler13);

        wrap.add(jPanel2);

        filler6.setName("filler6"); // NOI18N
        wrap.add(filler6);

        panGrid.setName("panGrid"); // NOI18N
        panGrid.setOpaque(false);
        panGrid.setPreferredSize(new java.awt.Dimension(1058, 340));
        panGrid.setLayout(new javax.swing.BoxLayout(panGrid, javax.swing.BoxLayout.X_AXIS));

        filler14.setName("filler14"); // NOI18N
        panGrid.add(filler14);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblDatos.setAutoCreateRowSorter(true);
        tblDatos.setFont(tblDatos.getFont().deriveFont(tblDatos.getFont().getSize()+2f));
        tblDatos.setGridColor(resourceMap.getColor("tblDatos.gridColor")); // NOI18N
        tblDatos.setName("tblDatos"); // NOI18N
        tblDatos.setRowHeight(24);
        tblDatos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
        });
        tblDatos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblDatosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        panGrid.add(jScrollPane1);

        filler15.setName("filler15"); // NOI18N
        panGrid.add(filler15);

        wrap.add(panGrid);

        filler7.setName("filler7"); // NOI18N
        wrap.add(filler7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wrap, javax.swing.GroupLayout.DEFAULT_SIZE, 1058, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wrap, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarTextoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarTextoKeyReleased
       
        if(txtBuscarTexto.getText().length()>0){
            filtrarEntidades().execute();
        }if(txtBuscarTexto.getText().isEmpty()){
           cargarEntidades().execute();
       }
    }//GEN-LAST:event_txtBuscarTextoKeyReleased

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
        setEntidadAbstracta(getTableModel().getFila(tblDatos.getSelectedRow()));
    }//GEN-LAST:event_tblDatosMouseClicked

    private void tblDatosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDatosKeyReleased
        setEntidadAbstracta(getTableModel().getFila(tblDatos.getSelectedRow()));
    }//GEN-LAST:event_tblDatosKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        configurarTabla();
        cargarEntidades().execute();
        ConfigurarDialog();
    }//GEN-LAST:event_formComponentShown

    /* Metodos que debe ser sobreescritos*/
    protected abstract String getTablaName();
    protected abstract String getNombreEntidad();
    protected abstract void limpiarEntidad();
    protected abstract IAbstractDAO getDao();
    protected abstract EntidadAbstracta getEntidadAbstracta();
    protected abstract void setEntidadAbstracta(EntidadAbstracta ea);
    protected abstract ZilleAbstractTableModel getTableModel();
    protected abstract ZilleAbstractTableModel setNewTableModel();
    protected abstract void setTableModel(ZilleAbstractTableModel ea);
    protected abstract void setTitulo();
    
    protected abstract JDialog getAMEntidad();
    protected abstract JButton getBtnAceptarEntidadEdit();
    protected abstract JButton getBtnCancelarEntidadEdit();
    protected abstract void CargarEntidadAlEditar(EntidadAbstracta entidad);   
    protected abstract boolean GuardarEntidadAlEditar();
    protected abstract Dimension getSizeDialogEdit();
    
    public void SetButtonExtra(JButton btn) {
        jPanel3.add(btn);
        jPanel3.revalidate();
        jPanel3.repaint();
    }
    
    
    protected Dimension getSizeMainWindow() {
        Rectangle rec = getWrapPanel().getBounds();
        rec.height += 5;
        //rec.width += 5;
        return rec.getSize();
    }
    
    public boolean isNuevoEnabled() {
        return true;
    }
    
    public boolean isModificarEnabled() {
        return true;
    }
    
    public boolean isEliminarEnabled() {
        return true;
    }

    private void ConfigurarDialog() {
        setTitulo();
        setSizeDialogo();
        lblTitulo.setText(getTitle());
        btnNuevo.setVisible(isNuevoEnabled());
        btnEditar.setVisible(isModificarEnabled());
        btnEliminar.setVisible(isEliminarEnabled());
    }
    
    protected String[] getConfigColumn() {
        return null;
    }
    
    private void configurarTabla() {
        setTableModel(setNewTableModel());
        
        final IAbstractDAO udao =  getDao();
        udao.conectar();
        ///Esto es para guardar los cambios cuando se edita desde la tabla
        getTableModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                // Solo actualizo la db si hubieron cambios en alguna columna
                if ( e.getColumn() != -1){
                    int row = e.getFirstRow();
                    EntidadAbstracta entidad = getTableModel().getFila(row);
                    if(entidad != null){
                        if(udao.guardar(entidad)== 0)                            
                        {
                            Error("Existen datos inválidos. Por favor, compruebe los datos.");
                        }
                    }
                }
            }
        });
    }
    
    private void setSizeDialogo() {
        this.setResizable(true);    
        Dimension dim = getSizeMainWindow();    
        this.setMinimumSize(dim);
        this.setPreferredSize(dim);
        dim.height -= 20;
        getWrapPanel().setSize(dim);    
        getWrapPanel().repaint();
        this.pack();
        this.repaint();
    }
    
     @Action
    public final Task cargarEntidades() {
        limpiarFiltros();
        return new CargarEntidadesTask(zilleprojects.ZilleProjectsApp.getApplication());
    }
     
    private class CargarEntidadesTask extends org.jdesktop.application.Task<Object, Void> {
        List<EntidadAbstracta> entidadesList;
        CargarEntidadesTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground()  {
            final IAbstractDAO udao = getDao();
            udao.conectar();
            entidadesList = udao.cargarTodos();
            totalFiltrado = totalEntidad = udao.count(getTablaName());
            return null;
        }

        @Override
        protected void succeeded(Object result) {

            if (entidadesList != null) {
                configurarTabla();
                for(EntidadAbstracta c:entidadesList){
                    getTableModel().addFila(c);
                }
                tblDatos.setModel(getTableModel());
                configurarColumnas();
                lblTotalEntidad.setText(String.valueOf(totalEntidad));
                lblTotalFiltrado.setText(String.valueOf(totalFiltrado));
            } else {
                OpcionPanel.showMessageDialog(null, "Falló la carga de "+ getNombreEntidad() +". Intente nuevamente.",
                        "Fallo de Conexión", OpcionPanel.INFORMATION_MESSAGE);
            }
        }
    }

    @Action
    public final Task filtrarEntidades() {
        
        return new FiltrarDatosTask(zilleprojects.ZilleProjectsApp.getApplication());
    }

    private class FiltrarDatosTask extends org.jdesktop.application.Task<Object, Void> {
        ArrayList<EntidadAbstracta> entidades;
        String query;
        Date fechaDesde, fechaHasta;
        FiltrarDatosTask(org.jdesktop.application.Application app) {
            super(app);
            query = txtBuscarTexto.getText();
            
            
        }

        @Override
        protected Object doInBackground()  {
            IAbstractDAO dao = getDao();
            dao.conectar();
            entidades = new ArrayList<EntidadAbstracta>(dao.filtrarPorTexto(query));
            totalFiltrado = entidades.size();
            return null;
        }

        @Override
        protected void succeeded(Object result) {

            if (entidades != null) {
                configurarTabla();
                for(EntidadAbstracta c: entidades){
                    getTableModel().addFila(c);
                }

                tblDatos.setModel(getTableModel());
                configurarColumnas();
                lblTotalFiltrado.setText(String.valueOf(totalFiltrado));
            } else {
                OpcionPanel.showMessageDialog(null, "Falló la carga de " + getNombreEntidad() +". Intente nuevamente.",
                        "Fallo de Conexión", OpcionPanel.INFORMATION_MESSAGE);
                cargarEntidades().execute();
            }
        }
    }

    @Action
    public final Task GuardarEntidad() {
        if(!GuardarEntidadAlEditar()){
            OpcionPanel.showError(getEntidadAbstracta().getErrores());
            return null;
        }
        return new GuardarEntidadTask(zilleprojects.ZilleProjectsApp.getApplication());
    }

    private class GuardarEntidadTask extends org.jdesktop.application.Task<Object, Void> {
        boolean guardadoOk;
        boolean esUpdate = false;
        GuardarEntidadTask(org.jdesktop.application.Application app) {
            super(app);
            
            esUpdate = getEntidadAbstracta().getId() == 0 ? false : true;
        }

        @Override
        protected Object doInBackground()  {
            IAbstractDAO dao = getDao();
            dao.conectar();
            if(esUpdate)
                guardadoOk = dao.modificar(getEntidadAbstracta()) != 0;
            else{
                int i = dao.guardar(getEntidadAbstracta());
                if(i != 0){
                    getEntidadAbstracta().setId(i);
                    guardadoOk = true;
                }
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            String msg;
            if (guardadoOk) {
                if(esUpdate){
                    getTableModel().insertarFila(getEntidadAbstracta(), tblDatos.getSelectedRow());
                    msg = "Éxito! Se actualizó la información de " + getEntidadAbstracta();
                }else{
                    getTableModel().addFila(getEntidadAbstracta());
                    msg = "Éxito! Se agrego la entidad: " +getEntidadAbstracta();
                }
//                tblDatos.setModel(getTableModel());
//                configurarColumnas();
                getAMEntidad().dispose();
                limpiarEntidadEdit();
                cargarEntidades().execute();
                Success("Éxito", msg);               
            } else {
                Error("Error", "Falló la carga de " +getNombreEntidad() +
                        ". Intente nuevamente.");
            }
        }
    }
    
    public JTable getTabla() {
        return tblDatos;
    }
        
    public void configurarColumnas() {  
        if (getConfigColumn() != null) {
            for(String conf: getConfigColumn()) {
                try {
                    String[] column = conf.split(":");
                    int colNum = Integer.parseInt(column[0]);
                    int width = Integer.parseInt(column[1]);
                    tblDatos.getColumnModel().getColumn(colNum).setPreferredWidth(width);
                } catch(Exception ex) {
                    
                }
            }
        }
    }

    @Action
    public final Task EliminarEntidad() {

        if(getEntidadAbstracta().getId()==0 || tblDatos.getSelectedRow() == -1){

            super.Info("Eliminar", "Por favor, primero seleccione una fila.");
            return null;
        }
        if(!(OpcionPanel.YES_OPTION == JOptionPane.showConfirmDialog(ZilleDialog.this,
                "¿Realmente desea eliminar la entidad "+ getEntidadAbstracta() +"?", "¿Eliminar?",
                OpcionPanel.YES_NO_OPTION, OpcionPanel.QUESTION_MESSAGE))){
            
            return null;
        }
        return new EliminarEntidadTask(zilleprojects.ZilleProjectsApp.getApplication());
    }

     class EliminarEntidadTask extends org.jdesktop.application.Task<Object, Void> {
        boolean eliminadoOK;
        String nombre = getEntidadAbstracta().toString();
        EliminarEntidadTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground()  {
            IAbstractDAO dao = getDao();
            dao.conectar();
            eliminadoOK = dao.eliminar(getEntidadAbstracta());
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            if (eliminadoOK) {
                
                cargarEntidades().execute();
                Success("Éxito", "Se eliminó correctamente la entidad: " + nombre);
                
            } else {
                Error("Error", "Falló la eliminación de la entidad "  + nombre +
                        ". Intente nuevamente.");
            }
        }
    }

    @Action
    public void limpiarFiltros(){
        txtBuscarTexto.setText("");
    }

    @Action
    public void showNuevaEntidad() {
       limpiarEntidad();
       internalAMdialog = getAMEntidad();
       internalAMdialog.setTitle("Nueva entidad: " + getNombreEntidad());
       CargarEntidadAlEditar(getEntidadAbstracta());
       internalAMdialog.setLocationRelativeTo(null);
       internalAMdialog.getRootPane().setDefaultButton(getBtnAceptarEntidadEdit());
       internalAMdialog.setMinimumSize(getSizeDialogEdit());
       internalAMdialog.setPreferredSize(getSizeDialogEdit());
       internalAMdialog.pack();
       internalAMdialog.setVisible(true);
    }
    
    @Action
    public void showModificarEntidad() {
        if(tblDatos.getSelectedRow() != -1) {
            setEntidadAbstracta(getTableModel().getFila(tblDatos.getSelectedRow()));
        }
        if(tblDatos.getSelectedRow() == -1 && getEntidadAbstracta().getId() == 0){
            Info("Información", "Seleccione una fila primero.");
            return;
        }
       
       internalAMdialog = getAMEntidad();
       CargarEntidadAlEditar(getEntidadAbstracta());
       internalAMdialog.setTitle("Editar " + getNombreEntidad());       
       internalAMdialog.setLocationRelativeTo(null);
       internalAMdialog.getRootPane().setDefaultButton(getBtnAceptarEntidadEdit());     
       internalAMdialog.setMinimumSize(getSizeDialogEdit());
       internalAMdialog.setPreferredSize(getSizeDialogEdit());
       internalAMdialog.pack();
       internalAMdialog.setVisible(true);
    }

    @Action
    public void limpiarEntidadEdit(){
        try{
        setEntidadAbstracta(getTableModel().getFila(tblDatos.getSelectedRow()));
        }catch(Exception ex){
            limpiarEntidad();
        }
        
    }
    
    public final JPanel getWrapPanel(){
        return wrap;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRecargar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler14;
    private javax.swing.Box.Filler filler15;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTotalEntidad;
    private javax.swing.JLabel lblTotalFiltrado;
    private javax.swing.JPanel panBotones;
    private javax.swing.JPanel panGrid;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtBuscarTexto;
    private javax.swing.JPanel wrap;
    // End of variables declaration//GEN-END:variables
    
    long totalEntidad = 0;
    long totalFiltrado = 0;
    
    private JDialog internalAMdialog;
}
