/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JExportarReporte.java
 *
 * Created on 27/06/2014, 19:27:56
 */
package zilleprojects.form;

import Utils.FileManager;
import Vista.JDialogCustom;
import Vista.PanelAzul;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.standard.MediaSizeName;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePrintServiceExporterConfiguration;
import net.sf.jasperreports.export.SimpleXlsReportConfiguration;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author m4tuu
 */
public class JExportarReporte extends JDialogCustom {
    JasperPrint report;
    /** Creates new form JExportarReporte */
    public JExportarReporte(java.awt.Frame parent, boolean modal, JasperPrint report) {
        super(parent, modal);
        initComponents();
        this.report = report;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel34 = new PanelAzul();
        genExcel = new javax.swing.JButton();
        genPDF = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getResourceMap(JExportarReporte.class);
        jPanel34.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel34.border.lineColor"), 2)); // NOI18N
        jPanel34.setName("jPanel34"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getActionMap(JExportarReporte.class, this);
        genExcel.setAction(actionMap.get("exportarXls")); // NOI18N
        genExcel.setIcon(resourceMap.getIcon("genExcel.icon")); // NOI18N
        genExcel.setText(resourceMap.getString("genExcel.text")); // NOI18N
        genExcel.setName("genExcel"); // NOI18N

        genPDF.setAction(actionMap.get("exportarPDF")); // NOI18N
        genPDF.setIcon(resourceMap.getIcon("genPDF.icon")); // NOI18N
        genPDF.setText(resourceMap.getString("genPDF.text")); // NOI18N
        genPDF.setName("genPDF"); // NOI18N

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() | java.awt.Font.BOLD, jLabel3.getFont().getSize()+4));
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setAction(actionMap.get("printReport")); // NOI18N
        jButton2.setIcon(resourceMap.getIcon("jButton2.icon")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jButton3.setAction(actionMap.get("viewReport")); // NOI18N
        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(genExcel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel34Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(genPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel34Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(jButton2)))))
                .addContainerGap())
        );

        jPanel34Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {genExcel, genPDF, jButton2, jButton3});

        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genExcel)
                    .addComponent(genPDF))
                .addGap(18, 18, 18)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(38, 38, 38))
        );

        jPanel34Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {genPDF, jButton2});

        jPanel34Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {genExcel, jButton3});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel34, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(report.getPages().isEmpty()){
            Error("El reporte no tiene páginas.");
            dispose();
        }
    }//GEN-LAST:event_formWindowActivated

    @Action
    public Task exportarXls() {
        if(report.getPages().isEmpty()){
            Error("El reporte no tiene páginas.");
            return null;
        }
        return new ExportarXlsTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class ExportarXlsTask extends org.jdesktop.application.Task<Object, Void> {
        String message = "";
        ExportarXlsTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ExportarXlsTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            
            JRXlsExporter exporter = new JRXlsExporter();
            exporter.setExporterInput(new SimpleExporterInput(report));
            File xls = new File(FileManager.getTmpFolder(), "export.xls");
            if(!xls.canWrite()) xls.setWritable(true);
            exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(xls));
            SimpleXlsReportConfiguration configuration = new SimpleXlsReportConfiguration();
            configuration.setOnePagePerSheet(false);
            configuration.setDetectCellType(false);
            configuration.setCollapseRowSpan(false);
            configuration.setRemoveEmptySpaceBetweenRows(false);
            
            exporter.setConfiguration(configuration);
            try {
                exporter.exportReport();
                try {
                    File dest = new File(FileManager.getTmpFolder(), "export-open.xls");
                    if(FileManager.copyfile(xls, dest)){
                        Desktop.getDesktop().open(dest);
                        xls.delete();
                        
                    }else{
                        Desktop.getDesktop().open(xls); 
                        
                    }
                } catch (IOException ex) {
                    Logger.getLogger(JExportarReporte.class.getName()).log(Level.SEVERE, null, ex);
                    Error("Reporte generado pero fallo la apertura. Su reporte se encuentra en " + xls);
                }
                Success("Reporte exportado correctamente. Recuerde guardarlo en otra ubicación.");
            } catch (JRException ex) {
                Logger.getLogger(JExportarReporte.class.getName()).log(Level.SEVERE, null, ex);
                Error("No fue posible exportar el reporte.");
            }
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    @Action
    public Task exportarPDF() {
         if(report.getPages().isEmpty()){
            Error("El reporte no tiene páginas.");
            return null;
        }
        return new ExportarPDFTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class ExportarPDFTask extends org.jdesktop.application.Task<Object, Void> {
        ExportarPDFTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ExportarPDFTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            File tmp = FileManager.getTmpFolder();
            try {
                byte[] pdfBytes = JasperExportManager.exportReportToPdf(report);   
                File pdf = new File(tmp, "report.pdf");
                
                FileOutputStream fos = new FileOutputStream(pdf);
                fos.write(pdfBytes);
                fos.close();
                
                try {
                    File dest = new File(tmp, "report-open.pdf");
                    if(FileManager.copyfile(pdf, dest)){
                        pdf.delete();
                        Desktop.getDesktop().open(dest);
                    }
                    else {
                        pdf.setReadOnly();
                        Desktop.getDesktop().open(pdf);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(JExportarReporte.class.getName()).log(Level.SEVERE, null, ex);
                    Error("Reporte generado pero fallo la apertura. Su reporte se encuentra en " + pdf);
                }
                
            }catch(FileNotFoundException ex){
            
            } catch (JRException ex) {
                Logger.getLogger(JExportarReporte.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch(IOException ex){
                
            }
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }


    @Action
    public Task printReport() {
         if(report.getPages().isEmpty()){
            Error("El reporte no tiene páginas.");
            return null;
        }
        return new PrintReportTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class PrintReportTask extends org.jdesktop.application.Task<Object, Void> {
        PrintReportTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to PrintReportTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            try {
                // Your Task's code here.  This method runs
                // on a background thread, so don't reference
                // the Swing GUI from here.
                PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();
                printRequestAttributeSet.add(MediaSizeName.ISO_A4);

                PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();
                //printServiceAttributeSet.add(new PrinterName("Epson Stylus 820 ESC/P 2", null));
                //printServiceAttributeSet.add(new PrinterName("hp LaserJet 1320 PCL 6", null));
                //printServiceAttributeSet.add(new PrinterName("PDFCreator", null));
        
                JRPrintServiceExporter exporter = new JRPrintServiceExporter();
        
                exporter.setExporterInput(new SimpleExporterInput(report));
                SimplePrintServiceExporterConfiguration configuration = new SimplePrintServiceExporterConfiguration();
                configuration.setPrintRequestAttributeSet(printRequestAttributeSet);
                configuration.setPrintServiceAttributeSet(printServiceAttributeSet);
                configuration.setDisplayPageDialog(false);
                configuration.setDisplayPrintDialog(true);
                exporter.setConfiguration(configuration);
                exporter.exportReport();
                
            } catch (JRException ex) {
                Logger.getLogger(JExportarReporte.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    @Action
    public Task viewReport() {
         if(report.getPages().isEmpty()){
            Error("El reporte no tiene páginas.");
            return null;
        }
        return new ViewReportTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class ViewReportTask extends org.jdesktop.application.Task<Object, Void> {
        ViewReportTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ViewReportTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            if(!report.getPages().isEmpty()){
                JasperViewer jviewer = new JasperViewer(report, false);
                jviewer.setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);
                jviewer.setTitle("Informe");
                jviewer.setVisible(true);
            }
            
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }




    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton genExcel;
    private javax.swing.JButton genPDF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel34;
    // End of variables declaration//GEN-END:variables
}
