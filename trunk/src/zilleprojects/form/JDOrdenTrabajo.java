/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDOrdenTrabajo.java
 *
 * Created on 25/04/2012, 22:07:52
 */
package zilleprojects.form;

import DAO.EquiposDAO;
import DAO.OrdenTrabajoDAO;
import DAO.ReportesDAO;
import Modelo.Equipos;
import Modelo.OrdenTrabajo;
import Utils.FechaUtil;
import Vista.OpcionPanel;
import Vista.PanelAzul;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author matuu
 */
public class JDOrdenTrabajo extends javax.swing.JDialog {
Image icono = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/zilleprojects/resources/icono.png"));
    /** Creates new form JDOrdenTrabajo */
    public JDOrdenTrabajo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        recargarListaDeOT();
        EquiposDAO eqDao = new EquiposDAO();
        eqDao.conectar();
        equiposTodos = eqDao.cargarTodosMenos1();
        setIconImage(icono);
        //jListDeOT.setModel(listDeOT);
        getRootPane().setDefaultButton(buscarOTs);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dialogSeleccionarEquipos = new javax.swing.JDialog();
        jPanel3 = new PanelAzul();
        buscarEquipos = new javax.swing.JTextField();
        btnBuscarEquipos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListDeEquipos = new javax.swing.JList();
        btnCancelarSeleccionarEquipo = new javax.swing.JButton();
        btnSeleccionarEquipo = new javax.swing.JButton();
        jPanel1 = new PanelAzul();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detalleOT = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        kmOT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        manoObraOT = new javax.swing.JTextField();
        tipoOT = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        aperturaOT = new com.toedter.calendar.JDateChooser();
        cierreOT = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        fechaOT = new com.toedter.calendar.JDateChooser();
        btnBuscarPorNumInterno = new javax.swing.JButton();
        ninternoOT = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        hsOT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        solicitanteOT = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        importeOT = new javax.swing.JTextField();
        otNum = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDeOT = new javax.swing.JList();
        modificarOrdenTrabajo = new javax.swing.JButton();
        cancelarOT = new javax.swing.JButton();
        textoFiltroOT = new javax.swing.JTextField();
        btnNuevoOT = new javax.swing.JButton();
        btnModificarOT = new javax.swing.JButton();
        btnEliminarOT = new javax.swing.JButton();
        buscarOTs = new javax.swing.JButton();
        crearOrdenTrabajo = new javax.swing.JButton();
        btnCancelarAccion = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        dialogSeleccionarEquipos.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getResourceMap(JDOrdenTrabajo.class);
        dialogSeleccionarEquipos.setTitle(resourceMap.getString("dialogSeleccionarEquipos.title")); // NOI18N
        dialogSeleccionarEquipos.setAlwaysOnTop(true);
        dialogSeleccionarEquipos.setMinimumSize(new java.awt.Dimension(460, 344));
        dialogSeleccionarEquipos.setModal(true);
        dialogSeleccionarEquipos.setName("dialogSeleccionarEquipos"); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N

        buscarEquipos.setText(resourceMap.getString("buscarEquipos.text")); // NOI18N
        buscarEquipos.setName("buscarEquipos"); // NOI18N
        buscarEquipos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buscarEquiposFocusGained(evt);
            }
        });

        btnBuscarEquipos.setIcon(resourceMap.getIcon("btnBuscarEquipos.icon")); // NOI18N
        btnBuscarEquipos.setText(resourceMap.getString("btnBuscarEquipos.text")); // NOI18N
        btnBuscarEquipos.setName("btnBuscarEquipos"); // NOI18N
        btnBuscarEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEquiposActionPerformed(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jListDeEquipos.setModel(listaDeEquipos);
        jListDeEquipos.setName("jListDeEquipos"); // NOI18N
        jScrollPane3.setViewportView(jListDeEquipos);

        btnCancelarSeleccionarEquipo.setIcon(resourceMap.getIcon("btnCancelarSeleccionarEquipo.icon")); // NOI18N
        btnCancelarSeleccionarEquipo.setText(resourceMap.getString("btnCancelarSeleccionarEquipo.text")); // NOI18N
        btnCancelarSeleccionarEquipo.setName("btnCancelarSeleccionarEquipo"); // NOI18N
        btnCancelarSeleccionarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarSeleccionarEquipoActionPerformed(evt);
            }
        });

        btnSeleccionarEquipo.setIcon(resourceMap.getIcon("btnSeleccionarEquipo.icon")); // NOI18N
        btnSeleccionarEquipo.setText(resourceMap.getString("btnSeleccionarEquipo.text")); // NOI18N
        btnSeleccionarEquipo.setName("btnSeleccionarEquipo"); // NOI18N
        btnSeleccionarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarEquipoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnSeleccionarEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelarSeleccionarEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(buscarEquipos, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBuscarEquipos)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancelarSeleccionarEquipo, btnSeleccionarEquipo});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnBuscarEquipos)
                    .addComponent(buscarEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarSeleccionarEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeleccionarEquipo))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCancelarSeleccionarEquipo, btnSeleccionarEquipo});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBuscarEquipos, buscarEquipos});

        javax.swing.GroupLayout dialogSeleccionarEquiposLayout = new javax.swing.GroupLayout(dialogSeleccionarEquipos.getContentPane());
        dialogSeleccionarEquipos.getContentPane().setLayout(dialogSeleccionarEquiposLayout);
        dialogSeleccionarEquiposLayout.setHorizontalGroup(
            dialogSeleccionarEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogSeleccionarEquiposLayout.setVerticalGroup(
            dialogSeleccionarEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jPanel1.setName("jPanel1"); // NOI18N

        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setInheritsPopupMenu(true);
        jPanel2.setMaximumSize(new java.awt.Dimension(489, 233));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel5, gridBagConstraints);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        detalleOT.setColumns(20);
        detalleOT.setLineWrap(true);
        detalleOT.setRows(2);
        detalleOT.setWrapStyleWord(true);
        detalleOT.setDisabledTextColor(resourceMap.getColor("detalleOT.disabledTextColor")); // NOI18N
        detalleOT.setEnabled(false);
        detalleOT.setMinimumSize(new java.awt.Dimension(164, 94));
        detalleOT.setName("detalleOT"); // NOI18N
        jScrollPane1.setViewportView(detalleOT);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel3, gridBagConstraints);

        kmOT.setText(resourceMap.getString("kmOT.text")); // NOI18N
        kmOT.setDisabledTextColor(resourceMap.getColor("kmOT.disabledTextColor")); // NOI18N
        kmOT.setEnabled(false);
        kmOT.setName("kmOT"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(kmOT, gridBagConstraints);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel4, gridBagConstraints);

        manoObraOT.setText(resourceMap.getString("manoObraOT.text")); // NOI18N
        manoObraOT.setDisabledTextColor(resourceMap.getColor("manoObraOT.disabledTextColor")); // NOI18N
        manoObraOT.setEnabled(false);
        manoObraOT.setName("manoObraOT"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(manoObraOT, gridBagConstraints);

        tipoOT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CORRECTIVO", "PREVENTIVO", "PROGRAMADO"  }));
        tipoOT.setEnabled(false);
        tipoOT.setName("tipoOT"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(tipoOT, gridBagConstraints);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel6, gridBagConstraints);

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel7, gridBagConstraints);

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel8, gridBagConstraints);

        aperturaOT.setEnabled(false);
        aperturaOT.setMinimumSize(new java.awt.Dimension(100, 30));
        aperturaOT.setName("aperturaOT"); // NOI18N
        aperturaOT.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(aperturaOT, gridBagConstraints);

        cierreOT.setEnabled(false);
        cierreOT.setMinimumSize(new java.awt.Dimension(60, 31));
        cierreOT.setName("cierreOT"); // NOI18N
        cierreOT.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(cierreOT, gridBagConstraints);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(jLabel2, gridBagConstraints);

        fechaOT.setEnabled(false);
        fechaOT.setName("fechaOT"); // NOI18N
        fechaOT.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(fechaOT, gridBagConstraints);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getActionMap(JDOrdenTrabajo.class, this);
        btnBuscarPorNumInterno.setAction(actionMap.get("showDialogSeleccionarEquipo")); // NOI18N
        btnBuscarPorNumInterno.setIcon(resourceMap.getIcon("btnBuscarPorNumInterno.icon")); // NOI18N
        btnBuscarPorNumInterno.setText(resourceMap.getString("btnBuscarPorNumInterno.text")); // NOI18N
        btnBuscarPorNumInterno.setName("btnBuscarPorNumInterno"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(btnBuscarPorNumInterno, gridBagConstraints);

        ninternoOT.setFont(ninternoOT.getFont().deriveFont(ninternoOT.getFont().getStyle() | java.awt.Font.BOLD));
        ninternoOT.setForeground(resourceMap.getColor("ninternoOT.foreground")); // NOI18N
        ninternoOT.setText(resourceMap.getString("ninternoOT.text")); // NOI18N
        ninternoOT.setMaximumSize(new java.awt.Dimension(120, 18));
        ninternoOT.setMinimumSize(new java.awt.Dimension(120, 18));
        ninternoOT.setName("ninternoOT"); // NOI18N
        ninternoOT.setPreferredSize(new java.awt.Dimension(120, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(ninternoOT, gridBagConstraints);

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel10, gridBagConstraints);

        hsOT.setText(resourceMap.getString("hsOT.text")); // NOI18N
        hsOT.setDisabledTextColor(resourceMap.getColor("hsOT.disabledTextColor")); // NOI18N
        hsOT.setEnabled(false);
        hsOT.setMinimumSize(new java.awt.Dimension(100, 31));
        hsOT.setName("hsOT"); // NOI18N
        hsOT.setPreferredSize(new java.awt.Dimension(100, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(hsOT, gridBagConstraints);

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel9, gridBagConstraints);

        solicitanteOT.setText(resourceMap.getString("solicitanteOT.text")); // NOI18N
        solicitanteOT.setDisabledTextColor(resourceMap.getColor("solicitanteOT.disabledTextColor")); // NOI18N
        solicitanteOT.setEnabled(false);
        solicitanteOT.setName("solicitanteOT"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(solicitanteOT, gridBagConstraints);

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(jLabel11, gridBagConstraints);

        importeOT.setText(resourceMap.getString("importeOT.text")); // NOI18N
        importeOT.setDisabledTextColor(resourceMap.getColor("importeOT.disabledTextColor")); // NOI18N
        importeOT.setEnabled(false);
        importeOT.setName("importeOT"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(importeOT, gridBagConstraints);

        otNum.setFont(resourceMap.getFont("otNum.font")); // NOI18N
        otNum.setForeground(resourceMap.getColor("otNum.foreground")); // NOI18N
        otNum.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        otNum.setText(resourceMap.getString("otNum.text")); // NOI18N
        otNum.setName("otNum"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(otNum, gridBagConstraints);

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        jPanel2.add(jLabel13, gridBagConstraints);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jListDeOT.setModel(listDeOT);
        jListDeOT.setName("jListDeOT"); // NOI18N
        jListDeOT.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDeOTValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListDeOT);

        modificarOrdenTrabajo.setAction(actionMap.get("modificarOrdenTrabajoAction")); // NOI18N
        modificarOrdenTrabajo.setIcon(resourceMap.getIcon("modificarOrdenTrabajo.icon")); // NOI18N
        modificarOrdenTrabajo.setText(resourceMap.getString("modificarOrdenTrabajo.text")); // NOI18N
        modificarOrdenTrabajo.setName("modificarOrdenTrabajo"); // NOI18N

        cancelarOT.setAction(actionMap.get("CerrarDialogOrdenesDeTrabajo")); // NOI18N
        cancelarOT.setIcon(resourceMap.getIcon("cancelarOT.icon")); // NOI18N
        cancelarOT.setText(resourceMap.getString("cancelarOT.text")); // NOI18N
        cancelarOT.setName("cancelarOT"); // NOI18N

        textoFiltroOT.setText(resourceMap.getString("textoFiltroOT.text")); // NOI18N
        textoFiltroOT.setName("textoFiltroOT"); // NOI18N

        btnNuevoOT.setIcon(resourceMap.getIcon("btnNuevoOT.icon")); // NOI18N
        btnNuevoOT.setText(resourceMap.getString("btnNuevoOT.text")); // NOI18N
        btnNuevoOT.setName("btnNuevoOT"); // NOI18N
        btnNuevoOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoOTActionPerformed(evt);
            }
        });

        btnModificarOT.setIcon(resourceMap.getIcon("btnModificarOT.icon")); // NOI18N
        btnModificarOT.setText(resourceMap.getString("btnModificarOT.text")); // NOI18N
        btnModificarOT.setName("btnModificarOT"); // NOI18N
        btnModificarOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarOTActionPerformed(evt);
            }
        });

        btnEliminarOT.setAction(actionMap.get("eliminarOrdenTrabajoAction")); // NOI18N
        btnEliminarOT.setIcon(resourceMap.getIcon("btnEliminarOT.icon")); // NOI18N
        btnEliminarOT.setText(resourceMap.getString("btnEliminarOT.text")); // NOI18N
        btnEliminarOT.setName("btnEliminarOT"); // NOI18N

        buscarOTs.setAction(actionMap.get("buscarOrdenTrabajoAction")); // NOI18N
        buscarOTs.setIcon(resourceMap.getIcon("buscarOTs.icon")); // NOI18N
        buscarOTs.setText(resourceMap.getString("buscarOTs.text")); // NOI18N
        buscarOTs.setName("buscarOTs"); // NOI18N

        crearOrdenTrabajo.setAction(actionMap.get("crearOrdenTrabajoAction")); // NOI18N
        crearOrdenTrabajo.setIcon(resourceMap.getIcon("crearOrdenTrabajo.icon")); // NOI18N
        crearOrdenTrabajo.setText(resourceMap.getString("crearOrdenTrabajo.text")); // NOI18N
        crearOrdenTrabajo.setName("crearOrdenTrabajo"); // NOI18N

        btnCancelarAccion.setIcon(resourceMap.getIcon("btnCancelarAccion.icon")); // NOI18N
        btnCancelarAccion.setText(resourceMap.getString("btnCancelarAccion.text")); // NOI18N
        btnCancelarAccion.setEnabled(false);
        btnCancelarAccion.setName("btnCancelarAccion"); // NOI18N
        btnCancelarAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarAccionActionPerformed(evt);
            }
        });

        jButton1.setAction(actionMap.get("exportarOT")); // NOI18N
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textoFiltroOT, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarOTs))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNuevoOT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarOT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarOT)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(modificarOrdenTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(crearOrdenTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(205, 205, 205)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(cancelarOT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnCancelarAccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEliminarOT, btnModificarOT, btnNuevoOT});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancelarAccion, crearOrdenTrabajo, modificarOrdenTrabajo});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancelarAccion)
                            .addComponent(crearOrdenTrabajo)
                            .addComponent(modificarOrdenTrabajo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jButton1)
                            .addComponent(cancelarOT)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(buscarOTs)
                            .addComponent(textoFiltroOT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNuevoOT)
                            .addComponent(btnModificarOT)
                            .addComponent(btnEliminarOT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnEliminarOT, btnModificarOT, btnNuevoOT});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buscarOTs, textoFiltroOT});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelarOT, jButton1});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListDeOTValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDeOTValueChanged
        if (obtenerDatosDeList()){
            desbloquearCampos(false);
            desbloquearBoton(3);
        }
    }//GEN-LAST:event_jListDeOTValueChanged

    private void btnModificarOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarOTActionPerformed
        if (obtenerDatosDeList()){
            desbloquearCampos(true);
            desbloquearBoton(1);
        }
    }//GEN-LAST:event_btnModificarOTActionPerformed

    private void btnNuevoOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoOTActionPerformed
        limpiarCampos();
        desbloquearCampos(true);
        desbloquearBoton(0);
    }//GEN-LAST:event_btnNuevoOTActionPerformed

    private void btnCancelarAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarAccionActionPerformed
        limpiarCampos();
        if (obtenerDatosDeList()){
            desbloquearCampos(false);
            desbloquearBoton(3);
        }
    }//GEN-LAST:event_btnCancelarAccionActionPerformed

    private void buscarEquiposFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarEquiposFocusGained
        //getRootPane().requestFocus();
        dialogSeleccionarEquipos.getRootPane().setDefaultButton(btnBuscarEquipos);
    }//GEN-LAST:event_buscarEquiposFocusGained

    private void btnBuscarEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEquiposActionPerformed
        EquiposDAO edao = new EquiposDAO();
        edao.conectar();
        equiposArrayList = edao.buscarDIMA(buscarEquipos.getText());
        listaDeEquipos.clear();
        for(Equipos eq: equiposArrayList){
            listaDeEquipos.addElement(eq);
        }
    }//GEN-LAST:event_btnBuscarEquiposActionPerformed

    private void btnCancelarSeleccionarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarSeleccionarEquipoActionPerformed
        dialogSeleccionarEquipos.dispose();
    }//GEN-LAST:event_btnCancelarSeleccionarEquipoActionPerformed

    private void btnSeleccionarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarEquipoActionPerformed
        if(!jListDeEquipos.isSelectionEmpty()){
        equipo = (Equipos) jListDeEquipos.getSelectedValue();
        dialogSeleccionarEquipos.dispose();
        ninternoOT.setText(equipo.getN_interno());
        }
    }//GEN-LAST:event_btnSeleccionarEquipoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDOrdenTrabajo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDOrdenTrabajo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDOrdenTrabajo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDOrdenTrabajo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JDOrdenTrabajo dialog = new JDOrdenTrabajo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Action
    public void CerrarDialogOrdenesDeTrabajo() {
        this.dispose();
    }

    public void desbloquearCampos(boolean b) {
        fechaOT.setEnabled(b);
        kmOT.setEnabled(b);
        hsOT.setEnabled(b);
        solicitanteOT.setEnabled(b);
        //ninternoOT.setEnabled(b);
        btnBuscarPorNumInterno.setEnabled(b);
        tipoOT.setEnabled(b);
        detalleOT.setEnabled(b);
        manoObraOT.setEnabled(b);
        aperturaOT.setEnabled(b);
        cierreOT.setEnabled(b);
        importeOT.setEnabled(b);
    }

    public void desbloquearBoton(int opcion) {
        /**
         * 0: Desbloquear boton Crear
         * 1: Desbloquear boton Modificar
         * */
        switch (opcion) {
            case 0:
                crearOrdenTrabajo.setEnabled(true);
                btnCancelarAccion.setEnabled(true);
                modificarOrdenTrabajo.setEnabled(false);
                break;
            case 1:
                crearOrdenTrabajo.setEnabled(false);
                btnCancelarAccion.setEnabled(true);
                modificarOrdenTrabajo.setEnabled(true);
                break;
            default:
                crearOrdenTrabajo.setEnabled(false);
                btnCancelarAccion.setEnabled(false);
                modificarOrdenTrabajo.setEnabled(false);
        }
    }

    public boolean obtenerDatosDeList() {
        if (!listDeOT.isEmpty()) {
            if(jListDeOT.isSelectionEmpty()){
                otActual = (OrdenTrabajo) listDeOT.get(0);
            }else{
                otActual = (OrdenTrabajo) listDeOT.get(jListDeOT.getSelectedIndex());
            }
            
            for (Equipos eq : equiposTodos) {
                if (eq.getId() == otActual.getnInternoID()) {
                    equipo = eq;
                }
            }
            setDatosDeOT(otActual);
            return true;
        }
        return false;
    }

    public void setDatosDeOT(OrdenTrabajo ot) {
        fechaOT.setDate(ot.getFecha());
        kmOT.setText(ot.getKm());
        hsOT.setText(ot.getHs());
        solicitanteOT.setText(ot.getSolicitante());
        ninternoOT.setText(equipo.getN_interno());
        tipoOT.setSelectedItem(ot.getMantenimiento());
        detalleOT.setText(ot.getDetalleServicio());
        manoObraOT.setText(ot.getManoDeObra());
        aperturaOT.setDate(ot.getFechaApertura());
        cierreOT.setDate(ot.getFechaCierre());
        importeOT.setText((ot.getImporte()));
        otNum.setText("OT"+ot.getOrdenTrabajoID());
    }

    public void limpiarCampos() {
        fechaOT.setDate(new Date());
        kmOT.setText("");
        hsOT.setText("");
        solicitanteOT.setText("");
        ninternoOT.setText("No Seleccionado...");
        equipo = new Equipos();
        otActual = new OrdenTrabajo();
        tipoOT.setSelectedIndex(0);
        detalleOT.setText("");
        manoObraOT.setText("");
        aperturaOT.setDate(new Date());
        cierreOT.setDate(null);
        importeOT.setText(null);
        otNum.setText(null);
    }

    private void setListDeOT(ArrayList<OrdenTrabajo> list) {
        listDeOT.clear();
        for (OrdenTrabajo ot : list) {
            listDeOT.addElement(ot);
        }
        jListDeOT.setModel(listDeOT);
    }

    public void setModelListOt(DefaultListModel list) {
        listDeOT = list;
    }
    
    public  void setSelectedOT(OrdenTrabajo ot){
        jListDeOT.setSelectedValue(ot, true);
    }

    public DefaultListModel getModelListOt() {
        return listDeOT;
    }
    
    private void recargarListaDeOT() {
        OrdenTrabajoDAO otDao = new OrdenTrabajoDAO();
        otDao.conectar();
        setListDeOT(otDao.cargarTodos());
    }
    
    @Action
    public Task checkearOrdenDeTrabajoAction() {
        return new checkearOrdenDeTrabajoActionTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class checkearOrdenDeTrabajoActionTask extends org.jdesktop.application.Task<Object, Void> {
        OrdenTrabajo ot = new OrdenTrabajo();
        checkearOrdenDeTrabajoActionTask(org.jdesktop.application.Application app) {
            
            super(app);
            ot.setOrdenTrabajoID(-1);
        }
        @Override protected Object doInBackground() {
            /*SOLICITUD: No verificar esto*/
            //OrdenTrabajoDAO otDao = new OrdenTrabajoDAO();
            //otDao.conectar();
            //ot = otDao.existeParaEquipo(equipo.getId());
            ot.setOrdenTrabajoID(0);
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            if(ot.getOrdenTrabajoID() == 0) {
                crearOrdenTrabajoAction().execute();
            }else if (ot.getOrdenTrabajoID() == -1){
                OpcionPanel.showMessageDialog(null, "Ocurrió un error al procesar la solicitud.", "Error", OpcionPanel.ERROR_MESSAGE);
          
            }else
            {
                String mensaje="Ya existe una orden de trabajo sin finalizar para este equipo. Datos:\n";
                mensaje +="\nID:" + ot.getOrdenTrabajoID();
                mensaje +="\nFECHA:" + FechaUtil.getFecha(ot.getFecha());
                mensaje +="\nTIPO:" + ot.getMantenimiento();
                mensaje +="\nEQUIPO:" + ot.getnInterno();
                mensaje +="\nSOLICITANTE:" + ot.getSolicitante();
                mensaje +="\nMANO DE OBRA:" + ot.getManoDeObra();
                mensaje +="\nOBSERVACIONES:" + ot.getDetalleServicio().substring(0, 35) +" [...]";
                mensaje +="\n\n¿Desea crear la orden de trabajo de todas formas?";
                if(OpcionPanel.YES_OPTION == OpcionPanel.showConfirmDialog(null, mensaje, "Confirmar", OpcionPanel.YES_NO_OPTION)){
                        crearOrdenTrabajoAction().execute();
                }
            }
        }
    }
    

    @Action
    public Task crearOrdenTrabajoAction() {
        if (equipo.getId()==0) {
            return null;
        }
        otActual = new OrdenTrabajo();
        otActual.setFecha(fechaOT.getDate());
        if (aperturaOT.getDate() != null) {
            otActual.setFechaApertura(aperturaOT.getDate());
        }
        if (cierreOT.getDate() != null) {
            otActual.setFechaCierre(cierreOT.getDate());
        }
        otActual.setKm(kmOT.getText());
        otActual.setHs(hsOT.getText());
        otActual.setSolicitante(solicitanteOT.getText());
        otActual.setnInternoID(equipo.getId());
        otActual.setnInterno(equipo.getN_interno());
        otActual.setMantenimiento(tipoOT.getSelectedItem().toString());
        otActual.setManoDeObra(manoObraOT.getText());
        otActual.setDetalleServicio(detalleOT.getText());
        otActual.setImporte(importeOT.getText());
        return new CrearOrdenTrabajoActionTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }
    private class CrearOrdenTrabajoActionTask extends org.jdesktop.application.Task<Object, Void> {

        int r = 0;

        CrearOrdenTrabajoActionTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to CrearOrdenTrabajoActionTask fields, here.
            super(app);
        }

        @Override
        protected Object doInBackground() {
            OrdenTrabajoDAO dao = new OrdenTrabajoDAO();
            dao.conectar();
            r = dao.guardar(otActual);
            otActual.setOrdenTrabajoID(r);
            return r;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            if (r > 0) {
                OpcionPanel.showMessageDialog(null, "Se creó la orden de trabajo correctamente.", "Éxito", OpcionPanel.INFORMATION_MESSAGE);
                
                listDeOT.addElement(otActual);
                //jListDeOT.setModel(listDeOT);
                jListDeOT.setSelectedValue(otActual, true);
            } else {
                OpcionPanel.showMessageDialog(null, "Ocurrió un error al procesar la solicitud.", "Error", OpcionPanel.ERROR_MESSAGE);
            }
        }
    }

    @Action
    public void showDialogSeleccionarEquipo() {
        //EquiposDAO edao = new EquiposDAO();
        //edao.conectar();
        //equiposArrayList = edao.cargarTodosMenos1();
        buscarEquipos.setText(null);
        listaDeEquipos.clear();
        for(Equipos eq: equiposTodos){
            listaDeEquipos.addElement(eq);
        }
        dialogSeleccionarEquipos.setLocationRelativeTo(null);
        dialogSeleccionarEquipos.setVisible(true);
    }

    @Action
    public Task modificarOrdenTrabajoAction() {
        if (equipo.getId()==0) {
            return null;
        }
        otActual.setFecha(fechaOT.getDate());
        if (aperturaOT.getDate() != null) {
            otActual.setFechaApertura(aperturaOT.getDate());
        }
        if (cierreOT.getDate() != null) {
            otActual.setFechaCierre(cierreOT.getDate());
        }
        otActual.setKm(kmOT.getText());
        otActual.setHs(hsOT.getText());
        otActual.setnInternoID(equipo.getId());
        otActual.setnInterno((equipo.getN_interno()));
        otActual.setMantenimiento(tipoOT.getSelectedItem().toString());
        otActual.setManoDeObra(manoObraOT.getText());
        otActual.setDetalleServicio(detalleOT.getText());
        otActual.setImporte(importeOT.getText());
        return new ModificarOrdenTrabajoActionTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class ModificarOrdenTrabajoActionTask extends org.jdesktop.application.Task<Object, Void> {
        int r =0;
        ModificarOrdenTrabajoActionTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ModificarOrdenTrabajoActionTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
           OrdenTrabajoDAO dao = new OrdenTrabajoDAO();
            dao.conectar();
            r = dao.modificar(otActual);
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
           if (r > 0) {
                OpcionPanel.showMessageDialog(null, "Se modificó la orden de trabajo correctamente.", "Éxito", OpcionPanel.INFORMATION_MESSAGE);
                if (obtenerDatosDeList()) {
                   desbloquearCampos(false);
                   desbloquearBoton(3);
               }
            } else {
                OpcionPanel.showMessageDialog(null, "Ocurrió un error al procesar la solicitud.", "Error", OpcionPanel.ERROR_MESSAGE);
                recargarListaDeOT();
                limpiarCampos();
           }
        }
    }

    @Action
    public Task eliminarOrdenTrabajoAction() {
        if(otActual.getOrdenTrabajoID() == 0) return  null;
        if(OpcionPanel.NO_OPTION == OpcionPanel.showConfirmDialog(null, "¿Realmente desea eliminar esta orden de trabajo?", "Confirmar eliminación", OpcionPanel.YES_NO_OPTION)){
            return null;
        }
        return new EliminarOrdenTrabajoActionTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class EliminarOrdenTrabajoActionTask extends org.jdesktop.application.Task<Object, Void> {
        boolean r = false;
        EliminarOrdenTrabajoActionTask(org.jdesktop.application.Application app) {
            
            super(app);
        }
        @Override protected Object doInBackground() {
            OrdenTrabajoDAO otDao = new OrdenTrabajoDAO();
            otDao.conectar();
            r = otDao.borrar(otActual);
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            if(r) {
                //int i = jListDeOT.getSelectedIndex();
                listDeOT.removeElement(otActual);
                limpiarCampos();
                /*if( jListDeOT.isSelectionEmpty())
                    jListDeOT.setSelectedIndex(0);*/
            }else{
                OpcionPanel.showMessageDialog(null, "Ocurrió un error al eliminar la Orden de Trabajo. \nIntente nuevamente. ", "Error", OpcionPanel.ERROR_MESSAGE);
            }
        }
    }

    @Action
    public Task buscarOrdenTrabajoAction() {
        
        return new BuscarOrdenTrabajoActionTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class BuscarOrdenTrabajoActionTask extends org.jdesktop.application.Task<Object, Void> {
        String query ="";
        
        BuscarOrdenTrabajoActionTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to BuscarOrdenTrabajoActionTask fields, here.
            super(app);
            query = textoFiltroOT.getText();
            
        }
        @Override protected Object doInBackground() {
            OrdenTrabajoDAO otDao = new OrdenTrabajoDAO();
            otDao.conectar();
            if(query.isEmpty()) ordenesTrabajoArray = otDao.cargarTodos();
            else ordenesTrabajoArray = otDao.busqueda(query);
            
            
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            listDeOT.clear();
            for(OrdenTrabajo ot: ordenesTrabajoArray){
                listDeOT.addElement(ot);
            }
        }
    }

    @Action
    public Task exportarOT() {
        if(otActual.getOrdenTrabajoID()==0){
            return null;
        }
        return new ExportarOTTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    private class ExportarOTTask extends org.jdesktop.application.Task<Object, Void> {
        String url="";
        ExportarOTTask(org.jdesktop.application.Application app) {
            
            super(app);
        }
        @Override protected Object doInBackground() {
            ReportesDAO rdao= new ReportesDAO();
            rdao.conectar();
            url=rdao.reportOrdenTrabajo(otActual.getOrdenTrabajoID(), otActual.getnInterno());
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
           OpcionPanel.showMessageDialog(null, url, "Exportación a Excel.", OpcionPanel.INFORMATION_MESSAGE);
        }
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser aperturaOT;
    private javax.swing.JButton btnBuscarEquipos;
    private javax.swing.JButton btnBuscarPorNumInterno;
    private javax.swing.JButton btnCancelarAccion;
    private javax.swing.JButton btnCancelarSeleccionarEquipo;
    private javax.swing.JButton btnEliminarOT;
    private javax.swing.JButton btnModificarOT;
    private javax.swing.JButton btnNuevoOT;
    private javax.swing.JButton btnSeleccionarEquipo;
    private javax.swing.JTextField buscarEquipos;
    private javax.swing.JButton buscarOTs;
    private javax.swing.JButton cancelarOT;
    private com.toedter.calendar.JDateChooser cierreOT;
    private javax.swing.JButton crearOrdenTrabajo;
    private javax.swing.JTextArea detalleOT;
    private javax.swing.JDialog dialogSeleccionarEquipos;
    private com.toedter.calendar.JDateChooser fechaOT;
    private javax.swing.JTextField hsOT;
    private javax.swing.JTextField importeOT;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jListDeEquipos;
    private javax.swing.JList jListDeOT;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField kmOT;
    private javax.swing.JTextField manoObraOT;
    private javax.swing.JButton modificarOrdenTrabajo;
    private javax.swing.JLabel ninternoOT;
    private javax.swing.JLabel otNum;
    private javax.swing.JTextField solicitanteOT;
    private javax.swing.JTextField textoFiltroOT;
    private javax.swing.JComboBox tipoOT;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel listDeOT = new DefaultListModel();
    private static DefaultListModel listaDeEquipos = new DefaultListModel();
    private static ArrayList<Equipos> equiposTodos = new ArrayList<Equipos>();
    private static ArrayList<Equipos> equiposArrayList = new ArrayList<Equipos>();
    private static ArrayList<OrdenTrabajo> ordenesTrabajoArray = new ArrayList<OrdenTrabajo>();
    private OrdenTrabajo otActual = new OrdenTrabajo();
    private static Equipos equipo = new Equipos();
}
