/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDEmpleadoGestion.java
 *
 * Created on 02/11/2011, 16:22:40
 */
package zilleprojects.form;

import DAO.FuncionDAO;
import DAO.OperarioDAO;
import Modelo.Funcion;
import Modelo.Operario;
import Vista.OpcionPanel;
import Vista.PanelAzul;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author matuu
 */
public class JDEmpleadoGestion extends javax.swing.JDialog {

    /** Creates new form JDEmpleadoGestion */
    public JDEmpleadoGestion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        recargarListaEmpledos();
        FuncionDAO fdao = new FuncionDAO();
        fdao.conectar();
        ArrayList<Funcion> func = fdao.cargarTodos();
        funcionCombo.removeAllElements();
        for (int i = 0; i < func.size(); i++) {
            funcionCombo.addElement((Funcion) func.get(i));

        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelAzul = new PanelAzul();
        jPanel1 = new javax.swing.JPanel();
        buscarEmpleado = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaEmpleados = new javax.swing.JList();
        botonModificar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonEliminar1 = new javax.swing.JButton();
        nuevoOperario = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nlegajo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cuil = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        observaciones = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        comboFuncion = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        desaCheck = new javax.swing.JCheckBox();
        vto_carnet = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        vto_psicofisico = new com.toedter.calendar.JDateChooser();
        vto_cargagral = new com.toedter.calendar.JDateChooser();
        vto_otros1 = new com.toedter.calendar.JDateChooser();
        vto_otros3 = new com.toedter.calendar.JDateChooser();
        vto_cargapeligrosa = new com.toedter.calendar.JDateChooser();
        vto_otros2 = new com.toedter.calendar.JDateChooser();
        descripcion1 = new javax.swing.JTextField();
        descripcion3 = new javax.swing.JTextField();
        descripcion2 = new javax.swing.JTextField();
        botonSalir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        operarioId = new javax.swing.JLabel();
        alertas = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getResourceMap(JDEmpleadoGestion.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(952, 501));
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);

        panelAzul.setMinimumSize(new java.awt.Dimension(952, 466));
        panelAzul.setName("panelAzul"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buscarEmpleado.setText(resourceMap.getString("buscarEmpleado.text")); // NOI18N
        buscarEmpleado.setToolTipText(resourceMap.getString("buscarEmpleado.toolTipText")); // NOI18N
        buscarEmpleado.setMinimumSize(new java.awt.Dimension(10, 30));
        buscarEmpleado.setName("buscarEmpleado"); // NOI18N
        buscarEmpleado.setPreferredSize(new java.awt.Dimension(10, 30));
        buscarEmpleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buscarEmpleadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                buscarEmpleadoFocusLost(evt);
            }
        });
        buscarEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarEmpleadoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscarEmpleadoKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(buscarEmpleado, gridBagConstraints);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listaEmpleados.setModel(empleadosList);
        listaEmpleados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaEmpleados.setName("listaEmpleados"); // NOI18N
        listaEmpleados.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaEmpleadosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaEmpleados);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        botonModificar.setIcon(resourceMap.getIcon("botonModificar.icon")); // NOI18N
        botonModificar.setText(resourceMap.getString("botonModificar.text")); // NOI18N
        botonModificar.setName("botonModificar"); // NOI18N
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(botonModificar, gridBagConstraints);

        botonEliminar.setIcon(resourceMap.getIcon("botonEliminar.icon")); // NOI18N
        botonEliminar.setText(resourceMap.getString("botonEliminar.text")); // NOI18N
        botonEliminar.setName("botonEliminar"); // NOI18N
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(botonEliminar, gridBagConstraints);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class).getContext().getActionMap(JDEmpleadoGestion.class, this);
        botonEliminar1.setAction(actionMap.get("eliminarEmpleado")); // NOI18N
        botonEliminar1.setIcon(resourceMap.getIcon("botonEliminar1.icon")); // NOI18N
        botonEliminar1.setText(resourceMap.getString("botonEliminar1.text")); // NOI18N
        botonEliminar1.setName("botonEliminar1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(botonEliminar1, gridBagConstraints);

        nuevoOperario.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("nuevoOperario.border.lineColor"), 1, true)); // NOI18N
        nuevoOperario.setToolTipText(resourceMap.getString("nuevoOperario.toolTipText")); // NOI18N
        nuevoOperario.setName("nuevoOperario"); // NOI18N
        nuevoOperario.setOpaque(false);
        nuevoOperario.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel2, gridBagConstraints);

        nlegajo.setText(resourceMap.getString("nlegajo.text")); // NOI18N
        nlegajo.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        nlegajo.setName("nlegajo"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(nlegajo, gridBagConstraints);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel3, gridBagConstraints);

        cuil.setText(resourceMap.getString("cuil.text")); // NOI18N
        cuil.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        cuil.setName("cuil"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(cuil, gridBagConstraints);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel4, gridBagConstraints);

        nombre.setText(resourceMap.getString("nombre.text")); // NOI18N
        nombre.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        nombre.setName("nombre"); // NOI18N
        nombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nombreFocusLost(evt);
            }
        });
        nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(nombre, gridBagConstraints);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel5, gridBagConstraints);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        observaciones.setColumns(25);
        observaciones.setRows(6);
        observaciones.setTabSize(4);
        observaciones.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        observaciones.setName("observaciones"); // NOI18N
        observaciones.setPreferredSize(new java.awt.Dimension(295, 90));
        jScrollPane2.setViewportView(observaciones);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 120.0;
        gridBagConstraints.weighty = 80.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jScrollPane2, gridBagConstraints);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel1, gridBagConstraints);

        comboFuncion.setModel(funcionCombo);
        comboFuncion.setName("comboFuncion"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(comboFuncion, gridBagConstraints);

        jButton3.setAction(actionMap.get("agregarFuncion")); // NOI18N
        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jButton3, gridBagConstraints);

        desaCheck.setText(resourceMap.getString("desaCheck.text")); // NOI18N
        desaCheck.setName("desaCheck"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(desaCheck, gridBagConstraints);

        vto_carnet.setName("vto_carnet"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_carnet, gridBagConstraints);

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel12, gridBagConstraints);

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel14, gridBagConstraints);

        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel15, gridBagConstraints);

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(jLabel16, gridBagConstraints);

        vto_psicofisico.setName("vto_psicofisico"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_psicofisico, gridBagConstraints);

        vto_cargagral.setName("vto_cargagral"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_cargagral, gridBagConstraints);

        vto_otros1.setName("vto_otros1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_otros1, gridBagConstraints);

        vto_otros3.setName("vto_otros3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_otros3, gridBagConstraints);

        vto_cargapeligrosa.setName("vto_cargapeligrosa"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_cargapeligrosa, gridBagConstraints);

        vto_otros2.setName("vto_otros2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(vto_otros2, gridBagConstraints);

        descripcion1.setText(resourceMap.getString("descripcion1.text")); // NOI18N
        descripcion1.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        descripcion1.setName("descripcion1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(descripcion1, gridBagConstraints);

        descripcion3.setText(resourceMap.getString("descripcion3.text")); // NOI18N
        descripcion3.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        descripcion3.setName("descripcion3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(descripcion3, gridBagConstraints);

        descripcion2.setText(resourceMap.getString("descripcion2.text")); // NOI18N
        descripcion2.setDisabledTextColor(resourceMap.getColor("nlegajo.disabledTextColor")); // NOI18N
        descripcion2.setName("descripcion2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        nuevoOperario.add(descripcion2, gridBagConstraints);

        botonSalir.setIcon(resourceMap.getIcon("botonSalir.icon")); // NOI18N
        botonSalir.setText(resourceMap.getString("botonSalir.text")); // NOI18N
        botonSalir.setName("botonSalir"); // NOI18N
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        jPanel2.setName("jPanel2"); // NOI18N

        btnCancelar.setIcon(resourceMap.getIcon("btnCancelar.icon")); // NOI18N
        btnCancelar.setText(resourceMap.getString("btnCancelar.text")); // NOI18N
        btnCancelar.setName("btnCancelar"); // NOI18N
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnModificar.setAction(actionMap.get("modificarOperario")); // NOI18N
        btnModificar.setIcon(resourceMap.getIcon("btnModificar.icon")); // NOI18N
        btnModificar.setText(resourceMap.getString("btnModificar.text")); // NOI18N
        btnModificar.setName("btnModificar"); // NOI18N

        btnGuardar.setAction(actionMap.get("agregarOperarios")); // NOI18N
        btnGuardar.setIcon(resourceMap.getIcon("btnGuardar.icon")); // NOI18N
        btnGuardar.setText(resourceMap.getString("btnGuardar.text")); // NOI18N
        btnGuardar.setName("btnGuardar"); // NOI18N

        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        operarioId.setFont(resourceMap.getFont("operarioId.font")); // NOI18N
        operarioId.setForeground(resourceMap.getColor("operarioId.foreground")); // NOI18N
        operarioId.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        operarioId.setText(resourceMap.getString("operarioId.text")); // NOI18N
        operarioId.setName("operarioId"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operarioId, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnModificar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardar)
                        .addComponent(btnModificar)
                        .addComponent(btnCancelar))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(operarioId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel17, operarioId});

        alertas.setForeground(resourceMap.getColor("alertas.foreground")); // NOI18N
        alertas.setText(resourceMap.getString("alertas.text")); // NOI18N
        alertas.setName("alertas"); // NOI18N

        javax.swing.GroupLayout panelAzulLayout = new javax.swing.GroupLayout(panelAzul);
        panelAzul.setLayout(panelAzulLayout);
        panelAzulLayout.setHorizontalGroup(
            panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAzulLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAzulLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuevoOperario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAzulLayout.createSequentialGroup()
                                .addComponent(alertas, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonSalir)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAzulLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );
        panelAzulLayout.setVerticalGroup(
            panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAzulLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                    .addGroup(panelAzulLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nuevoOperario, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonSalir)
                            .addComponent(alertas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        panelAzulLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {alertas, botonSalir});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAzul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAzul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        dispose();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void buscarEmpleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarEmpleadoFocusGained
        if (buscarEmpleado.getText().equals("Buscar empleados...")) {
            buscarEmpleado.setText("");
        } else {
        }
    }//GEN-LAST:event_buscarEmpleadoFocusGained

    private void nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreKeyTyped
        if (!nombre.getText().isEmpty()) {
            nombre.setText(nombre.getText().toUpperCase());
        }
    }//GEN-LAST:event_nombreKeyTyped

    private void nombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreFocusLost
        if (!nombre.getText().isEmpty()) {
            nombre.setText(nombre.getText().toUpperCase());
        }

    }//GEN-LAST:event_nombreFocusLost

    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
        if (obtenerDatosDeList()) {
            isEdit = true;
            desbloquearCampos(true);
            desbloquearBoton(1);
        }

    }//GEN-LAST:event_botonModificarActionPerformed

    private void buscarEmpleadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarEmpleadoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarEmpleadoKeyPressed

    private void buscarEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarEmpleadoKeyReleased
        if (buscarEmpleado.getText().length() >= 3) {
            query = buscarEmpleado.getText();
            buscar().execute();
        }
        if (buscarEmpleado.getText().length() == 0) {
            recargarListaEmpledos();
        }
    }//GEN-LAST:event_buscarEmpleadoKeyReleased

    private void buscarEmpleadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarEmpleadoFocusLost
        if (buscarEmpleado.getText().isEmpty()) {
            buscarEmpleado.setText("Buscar empleados...");
        } 
    }//GEN-LAST:event_buscarEmpleadoFocusLost

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiar();
        isEdit = false;
        if (obtenerDatosDeList()) {
            desbloquearCampos(false);
            desbloquearBoton(3);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        isEdit = true;
        limpiar();
        desbloquearCampos(true);
        desbloquearBoton(0);
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void listaEmpleadosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaEmpleadosValueChanged
        isEdit = false;
        if (obtenerDatosDeList()) {
            desbloquearCampos(false);
            desbloquearBoton(3);
        }
    }//GEN-LAST:event_listaEmpleadosValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                
                JDEmpleadoGestion dialog = new JDEmpleadoGestion(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    
    /******************************************************************/
    public void desbloquearCampos(boolean b) {
                   
        nlegajo.setEnabled(b);
        cuil.setEnabled(b);
        nombre.setEnabled(b);
        observaciones.setEnabled(b);
        comboFuncion.setEnabled(b);
        desaCheck.setEnabled(b);
        vto_carnet.setEnabled(b);
        vto_psicofisico.setEnabled(b);
        vto_cargagral.setEnabled(b);
        vto_cargapeligrosa.setEnabled(b);
        vto_otros1.setEnabled(b);
        vto_otros2.setEnabled(b);
        vto_otros3.setEnabled(b);
        descripcion1.setEnabled(b);
        descripcion2.setEnabled(b);
        descripcion3.setEnabled(b);
        alertas.setText(null);
        
    }

    public void desbloquearBoton(int opcion) {
        /**
         * 0: Desbloquear boton Crear
         * 1: Desbloquear boton Modificar
         * */
        switch (opcion) {
            case 0:
                btnGuardar.setEnabled(true);
                btnCancelar.setEnabled(true);
                btnModificar.setEnabled(false);
                break;
            case 1:
                btnGuardar.setEnabled(false);
                btnCancelar.setEnabled(true);
                btnModificar.setEnabled(true);
                break;
            default:
                btnGuardar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnModificar.setEnabled(false);
        }
    }

    public boolean obtenerDatosDeList() {

        if (!empleadosList.isEmpty()) {
            if (listaEmpleados.isSelectionEmpty()) {
                opSelected = (Operario) empleadosList.get(0);
            } else {
                opSelected = (Operario) empleadosList.get(listaEmpleados.getSelectedIndex());
            }
            setDatosDeEmpleado(opSelected);
            return true;
        }
        return false;
    }

    public void setDatosDeEmpleado(Operario op) {
        operarioId.setText(op.getId()+"");
        nlegajo.setText(op.getN_legajo());
        cuil.setText(op.getCuil());
        nombre.setText(op.getNombre());
        observaciones.setText(op.getObservaciones());
        comboFuncion.setSelectedItem(new Funcion(op.getFuncion()));
        desaCheck.setSelected(op.isDesarraigo());
        vto_carnet.setDate(op.getVto_carnet());
        vto_psicofisico.setDate(op.getVto_psicofisico());
        vto_cargagral.setDate(op.getVto_cargagral());
        vto_cargapeligrosa.setDate(op.getVto_cargapeligrosa());
        vto_otros1.setDate(op.getVto_otros1());
        vto_otros2.setDate(op.getVto_otros2());
        vto_otros3.setDate(op.getVto_otros3());
        descripcion1.setText(op.getDescripcion_vto1());
        descripcion2.setText(op.getDescripcion_vto2());
        descripcion3.setText(op.getDescripcion_vto3());
        alertas.setText(null);
        
    }


    private void setListDeEmpleado(ArrayList<Operario> list) {
        empleadosList.clear();
        for (Operario l : list) {
            empleadosList.addElement(l);
        }
        listaEmpleados.setModel(empleadosList);
    }
    
    
    public void limpiar() {
        opSelected = new Operario();
        nlegajo.setText("");
        cuil.setText("");
        nombre.setText("");
        observaciones.setText("");
        comboFuncion.setSelectedIndex(0);
        desaCheck.setSelected(false);
        vto_carnet.setDate(null);
        vto_psicofisico.setDate(null);
        vto_cargagral.setDate(null);
        vto_cargapeligrosa.setDate(null);
        vto_otros1.setDate(null);
        vto_otros2.setDate(null);
        vto_otros3.setDate(null);
        descripcion1.setText(null);
        descripcion2.setText(null);
        descripcion3.setText(null);
        operarioId.setText("####");
        alertas.setText(null);
    }
    
    private void recargarListaEmpledos() {
        verTodos().execute();
    }
    
    /********************************************************************/

    

    @Action
    public Task buscar() {
        if (buscarEmpleado.getText().isEmpty()) {
            return null;
        }
        return new BuscarTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }

    
    private class BuscarTask extends org.jdesktop.application.Task<Object, Void> {

        BuscarTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to BuscarTask fields, here.
            super(app);
        }

        @Override
        protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            OperarioDAO odao = new OperarioDAO();
            odao.conectar();
            empleados = odao.buscar(query);
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            
            if (empleados.isEmpty()) {
                empleadosList.removeAllElements();
                limpiar();
                alertas.setText("No hay datos coincidentes.");

            } else {
                empleadosList.removeAllElements();
                for (int i = 0; i < empleados.size(); i++) {
                    empleadosList.addElement((Operario) empleados.get(i));
                }
                listaEmpleados.setModel(empleadosList);
            }
        }
    }

    @Action
    public Task verTodos() {
        return new VerTodosTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }
    private class VerTodosTask extends org.jdesktop.application.Task<Object, Void> {

        VerTodosTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to VerTodosTask fields, here.
            super(app);
        }

        @Override
        protected Object doInBackground() {
            OperarioDAO odao = new OperarioDAO();
            odao.conectar();
            empleados = odao.cargarTodos();
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            if (empleados.isEmpty()) {
                alertas.setText("No hay datos coincidentes.");

            } else {
                empleadosList.removeAllElements();
                for (int i = 0; i < empleados.size(); i++) {
                    empleadosList.addElement((Operario) empleados.get(i));
                }
                listaEmpleados.setModel(empleadosList);
                alertas.setText("");
            }
        }
    }

    @Action
    public Task eliminarEmpleado() {
        if(opSelected.getId()==0){
            return null;
        }
        if(OpcionPanel.NO_OPTION == OpcionPanel.showConfirmDialog(rootPane, "Se eliminará la información de: \n"
                + opSelected.getNombre(), "\n¿Está seguro/a que desea continuar?", OpcionPanel.YES_NO_OPTION)) {
            return null;
        }
        return new EliminarEmpleadoTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }
    private class EliminarEmpleadoTask extends org.jdesktop.application.Task<Object, Void> {


        EliminarEmpleadoTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to EliminarEmpleadoTask fields, here.
            super(app);
        }

        @Override
        protected Object doInBackground() {
            OperarioDAO odao = new OperarioDAO();
            odao.conectar();
            return odao.borrar(opSelected);  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            Boolean r = (Boolean) result;
            if (r) {
                empleadosList.removeElement(opSelected);
                limpiar();
                alertas.setText("Eliminación realizada");
            } else {
                OpcionPanel.showMessageDialog(null, "Ocurrió un error. \nIntente nuevamente.", "Error", OpcionPanel.ERROR_MESSAGE);
            }
        }
    } 

    @Action
    public Task agregarOperarios() {
        if (nombre.getText().isEmpty()) {
            alertas.setText("El campo NOMBRE es obligatorio.");
            return null;
        }
        opSelected = new Operario();
        opSelected.setNombre(nombre.getText());
        opSelected.setN_legajo(nlegajo.getText());
        opSelected.setFuncion(((Funcion)funcionCombo.getSelectedItem()).getId());
        opSelected.setObservaciones(observaciones.getText());
        opSelected.setDesarraigo(desaCheck.isSelected());
        opSelected.setCuil(cuil.getText());
        opSelected.setVto_carnet(vto_carnet.getDate());
        opSelected.setVto_psicofisico(vto_psicofisico.getDate());
        opSelected.setVto_cargagral(vto_cargagral.getDate());
        opSelected.setVto_cargapeligrosa(vto_cargapeligrosa.getDate());
        opSelected.setVto_otros1(vto_otros1.getDate());
        opSelected.setVto_otros2(vto_otros2.getDate());
        opSelected.setVto_otros3(vto_otros3.getDate());
        opSelected.setDescripcion_vto1(descripcion1.getText());
        opSelected.setDescripcion_vto2(descripcion2.getText());
        opSelected.setDescripcion_vto3(descripcion3.getText());
        return new AgregarOperariosTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }
    private class AgregarOperariosTask extends org.jdesktop.application.Task<Object, Void> {
        int r = -1;
        AgregarOperariosTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to AgregarOperariosTask fields, here.
            super(app);
        }

        @Override
        protected Object doInBackground() {
            OperarioDAO odao = new OperarioDAO();
            odao.conectar();
            r = odao.guardar(opSelected);
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            if (r > 0) {
                opSelected.setId(r);
                empleadosList.addElement(opSelected);
                alertas.setText("Operación realizada con éxito.");
                limpiar();
                listaEmpleados.setSelectedValue(opSelected, true);
            } else {
                OpcionPanel.showMessageDialog(null, "Ocurrió un error. \nIntente nuevamente.", "Error", OpcionPanel.ERROR_MESSAGE);
            }
        }
    }

    @Action
    public Task modificarOperario() {
        if (nombre.getText().isEmpty()) {
            alertas.setText("El campo NOMBRE es obligatorio.");
            return null;
        }
        opSelected.setNombre(nombre.getText());
        opSelected.setN_legajo(nlegajo.getText());
        opSelected.setFuncion(((Funcion)funcionCombo.getSelectedItem()).getId());
        opSelected.setObservaciones(observaciones.getText());
        opSelected.setDesarraigo(desaCheck.isSelected());
        opSelected.setCuil(cuil.getText());
        opSelected.setVto_carnet(vto_carnet.getDate());
        opSelected.setVto_psicofisico(vto_psicofisico.getDate());
        opSelected.setVto_cargagral(vto_cargagral.getDate());
        opSelected.setVto_cargapeligrosa(vto_cargapeligrosa.getDate());
        opSelected.setVto_otros1(vto_otros1.getDate());
        opSelected.setVto_otros2(vto_otros2.getDate());
        opSelected.setVto_otros3(vto_otros3.getDate());
        opSelected.setDescripcion_vto1(descripcion1.getText());
        opSelected.setDescripcion_vto2(descripcion2.getText());
        opSelected.setDescripcion_vto3(descripcion3.getText());
        return new ModificarOperarioTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }
    private class ModificarOperarioTask extends org.jdesktop.application.Task<Object, Void> {
        int r = -1;

        ModificarOperarioTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ModificarOperarioTask fields, here.
            super(app);
            
        }

        @Override
        protected Object doInBackground() {
            OperarioDAO odao = new OperarioDAO();
            odao.conectar();
            r = odao.modificar(opSelected);
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            isEdit = false;
            if (r == 0) {
                alertas.setText("Datos guardados.");
                
                if (obtenerDatosDeList()) {
                    desbloquearCampos(false);
                    desbloquearBoton(3);
                }
            } else {
                OpcionPanel.showMessageDialog(null, "Ocurrió un error al procesar la solicitud.", "Error", OpcionPanel.ERROR_MESSAGE);
                recargarListaEmpledos();
                limpiar();
            }
                

            
        }
    }
    
    @Action
    public Task agregarFuncion() {
        newFc = OpcionPanel.showInputDialog(this, "Función: ");
        if (newFc == null || newFc.isEmpty()) {
            return null;
        }
        return new AgregarFuncionTask(org.jdesktop.application.Application.getInstance(zilleprojects.ZilleProjectsApp.class));
    }
    private class AgregarFuncionTask extends org.jdesktop.application.Task<Object, Void> {

        Funcion fun = new Funcion(newFc);
        int r = -1;

        AgregarFuncionTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to AgregarFuncionTask fields, here.
            super(app);
        }

        @Override
        protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            FuncionDAO fdao = new FuncionDAO();
            fdao.conectar();
            r = fdao.guardar(fun);
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            if (r >= 0) {
                fun.setId(r);
                funcionCombo.addElement(fun);
            } else {
                OpcionPanel.showMessageDialog(null, "Compruebe que ya no exista una \nfunción con ese nombre.", "Error", OpcionPanel.ERROR_MESSAGE);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alertas;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonEliminar1;
    private javax.swing.JButton botonModificar;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JTextField buscarEmpleado;
    private javax.swing.JComboBox comboFuncion;
    private javax.swing.JTextField cuil;
    private javax.swing.JCheckBox desaCheck;
    private javax.swing.JTextField descripcion1;
    private javax.swing.JTextField descripcion2;
    private javax.swing.JTextField descripcion3;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listaEmpleados;
    private javax.swing.JTextField nlegajo;
    private javax.swing.JTextField nombre;
    private javax.swing.JPanel nuevoOperario;
    private javax.swing.JTextArea observaciones;
    private javax.swing.JLabel operarioId;
    private javax.swing.JPanel panelAzul;
    private com.toedter.calendar.JDateChooser vto_cargagral;
    private com.toedter.calendar.JDateChooser vto_cargapeligrosa;
    private com.toedter.calendar.JDateChooser vto_carnet;
    private com.toedter.calendar.JDateChooser vto_otros1;
    private com.toedter.calendar.JDateChooser vto_otros2;
    private com.toedter.calendar.JDateChooser vto_otros3;
    private com.toedter.calendar.JDateChooser vto_psicofisico;
    // End of variables declaration//GEN-END:variables
    
    static DefaultListModel empleadosList = new DefaultListModel();
    ArrayList<Operario> empleados = new ArrayList<Operario>();
    static DefaultComboBoxModel funcionCombo = new DefaultComboBoxModel();
    private Operario opSelected = new Operario();
    String newFc="";
    String query ="";
    boolean isEdit= false;
}
